"""
Module generated by PkgTemplates.
Add modules here for testing.
"""
module LBPM_julia

include("Utils.jl")
include("CalcSingleSample.jl")
include("CalcSaturationGradients.jl")

using .Utils: InputParameters, InputFiles
using .CalcSingleSample: ImportLattices, CalcSample
using .CalcSaturationGradients: FindMaxVelocities, CalcGradients
using Parameters, SymbolServer

export CalcAllSamples
export velocity_increments
export ap_all
export aw_all
export an_all
export saturations_all


# Struct to give as inputs to implementations.

"""
Loop over all samples and return arrays containing all distributions
"""
function CalcAllSamples()
    # Input and parameters
    params=InputParameters()
    input_files_velocities=readdir("velocities/")
    input_files_raw = readdir("raw_data/")
    number_samples=length(input_files_raw)
    velocity_increments = FindMaxVelocities()
    Nv = length(velocity_increments)
    # Arrays
    ap_all = zeros(Float64,(number_samples,Nv-1))
    aw_all = zeros(Float64,(number_samples,Nv-1))
    an_all = zeros(Float64,(number_samples,Nv-1))
    saturations_all = zeros(Float64,(number_samples,3)) # [porosity, w. fraction, nw. fraction]
    
    for i in 1:number_samples # Loop over samples

        # Create input file struct
        input_files=InputFiles(string("raw_data/",input_files_raw[i]),string("velocities/",input_files_velocities[i]))
        println("Sample name: ", input_files.infile_raw, ", Velocity file: ", input_files.input_files_velocities)
        # Calculations 
        data_velocities,raw_vector = ImportLattices(params, input_files)
        ap_all[i,:],aw_all[i,:],an_all[i,:],saturations_all[i,:] = CalcSample(params,data_velocities,raw_vector,velocity_increments)
        println("Details: Porosity: ",saturations_all[i,1], " Wetting fraction: ", saturations_all[i,2], " Nonwetting fraction: ", saturations_all[i,3] )
    end # loop over all samples
    return velocity_increments,ap_all,aw_all,an_all,saturations_all
end # CalcAllSamples

# Run all
# ap_all,aw_all,an_all = CalcAllSamples(params)

# Calculate a_m(v) with all samples
# a_m = CalcGradients()

# Calculate A_m = ∫_{-∞}^{∞} dv_z a_m = 0

# Plotting
end
